---
import { LogOut, HelpCircle, ExternalLink, Settings } from 'lucide-react';
import {
  getDiscordUserData,
  getAvatarUrl,
  getInitials,
} from '@/lib/data-utils';
import BrandLogo from '@components/BrandLogo.astro';
import ThemeIcon from '@components/ThemeIcon.astro';
import navLinks from '@utils/navigation.ts';
import NavLink from '@components/ui/links/NavLink.astro';

// Get user data from cookies on the server side
const userData = await getDiscordUserData(Astro.cookies);
---

<header
  class="sticky inset-x-0 top-4 z-50 flex w-full flex-wrap text-sm md:flex-nowrap md:justify-start"
>
  <nav
    class="relative mx-2 w-[1200px] h-[70px] rounded-[26px] border border-cyan-200/40 bg-cyan-100/40 px-4 py-3 backdrop-blur-md dark:border-neutral-700/40 dark:bg-slate-800/80 dark:backdrop-blur-md md:flex md:items-center md:justify-between md:px-6 md:py-0 lg:px-8 xl:mx-auto"
    aria-label="Global"
  >
    <div class="flex items-center justify-between">
      <!-- Brand logo -->
      <a
        class="flex-none rounded-lg text-xl font-bold outline-none ring-zinc-500 focus-visible:ring dark:ring-zinc-200 dark:focus:outline-none"
        href="/dash"
        aria-label="Brand"
      >
        <BrandLogo class="h-auto w-24" />
      </a>
    </div>
    <!-- Contains navigation links -->
    <div
      id="navbar-collapse-with-animation"
      class="hs-collapse hidden grow basis-full overflow-hidden transition-all duration-300 md:block"
    >
      <!-- Contains navigation links -->
      <div
        id="navbar-collapse-with-animation"
        class="hs-collapse hidden grow basis-full overflow-hidden transition-all duration-300 md:block"
      >
        <!-- Navigation links container -->
        <div
          class="mt-5 flex flex-col gap-x-0 gap-y-4 md:mt-0 md:flex-row md:items-center md:justify-end md:gap-x-4 lg:gap-x-7 md:gap-y-0 md:ps-7"
        >
          <!-- Navigation links and Authentication component -->
          {
            navLinks.dashNavBarLinks.map((link) => (
              <NavLink url={link.url} name={link.name} />
            ))
          }
          <button
            id="userDropdown"
            role="button"
            aria-expanded={false}
            class={`
            flex items-center justify-start gap-x-2 h-auto w-auto
           ring-zinc-500 focus-visible:ring outline-none
           dark:border-slate-700 dark:ring-zinc-200 dark:focus:outline-none
           md:my-6 md:border-s md:border-slate-300 md:ps-6 2xl:text-base
           hover:text-fuchsia-400 hover:scale-105 dark:hover:text-fuchsia-300
           bg-discord-blurple text-white px-4 py-2 rounded-lg
           transform transition-all duration-200
          `}
          >
            <div class="flex items-center gap-x-2">
              {
                userData?.avatar ? (
                  <img
                    src={getAvatarUrl(userData)}
                    alt={userData.username}
                    class="h-8 w-8 rounded-full object-cover"
                    loading="lazy"
                  />
                ) : (
                  <div class="h-8 w-8 rounded-full bg-gradient-to-r from-pink-500 to-purple-500 flex items-center justify-center text-white">
                    {getInitials(userData?.username)}
                  </div>
                )
              }
              <span class="hidden md:inline-block text-sm font-medium">
                {userData?.global_name}
              </span>
            </div>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 text-white transform transition-transform duration-300"
              [class.rotate-180]="isDropdownOpen"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                clip-rule="evenodd"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
    <!-- User Menu and Theme Switcher -->
    <div class="flex items-center gap-4">
      <div class="relative">
        <div
          id="dropdownMenu"
          class="hidden absolute right-0 mt-2 w-48 rounded-lg shadow-lg py-1 bg-cyan-50 dark:bg-slate-800 ring-1 ring-black ring-opacity-5"
        >
          <div
            class="px-4 py-2 border-b border-slate-200 dark:border-slate-700"
          >
            <p class="text-sm font-medium text-cyan-900 dark:text-cyan-400">
              user: @{userData?.username}
            </p>
            <p class="text-xs text-slate-500 dark:text-slate-400">
              ID: {userData?.id}
            </p>
          </div>
          <div
            class="flex items-center px-2 py-0 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 cursor-pointer"
            data-theme-click
          >
            <ThemeIcon className="mr-3 h-4 w-4" />
            <span class="py-2">Theme</span>
          </div>
          <a
            href="dash/settings"
            class="flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700"
          >
            <Settings className="mr-3 h-4 w-4" /> Settings
          </a>
          <a
            href="https://docs.vikshan.tech"
            rel="noopener noreferrer"
            target="_blank"
            class="flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700"
          >
            <ExternalLink className="mr-3 h-4 w-4" /> Documentation
          </a>
          <a
            href="${process.env.SUPPORT_SERVER}"
            class="flex items-center px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700"
          >
            <HelpCircle className="mr-3 h-4 w-4" /> Support
          </a>
          <div class="w-full">
            <button
              id="logoutButton"
              class="flex items-center w-full px-4 py-2 text-sm text-pink-600 hover:bg-slate-100 dark:hover:bg-slate-700"
              aria-label="Logout"
            >
              <LogOut className="mr-3 h-4 w-4" /> Logout
            </button>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <style>
    button:hover {
      box-shadow: 0 0 15px rgba(88, 101, 242, 0.5);
    }

    @keyframes bounce {
      0%,
      100% {
        transform: translateY(0);
      }
      50% {
        transform: translateY(-3px);
      }
    }

    button:active {
      transform: scale(0.95);
    }

    [data-theme-click] {
      cursor: pointer;
      user-select: none;
    }
  </style>

  <!-- Theme Appearance script to manage light/dark modes -->
  <script is:inline>
    const themeContainer = document.querySelector('[data-theme-click]');
    if (themeContainer) {
      themeContainer.addEventListener('click', (e) => {
        // Find the closest clickable theme value element
        const themeElement = e.target?.closest('[data-hs-theme-click-value]');
        if (themeElement) {
          const value = themeElement.getAttribute('data-hs-theme-click-value');
          if (value) {
            HSThemeAppearance.setAppearance(value, true, themeElement);
          }
        }
      });
    }
    const HSThemeAppearance = {
      init() {
        const defaultTheme = 'default';
        let theme = localStorage.getItem('hs_theme') || defaultTheme;

        if (document.querySelector('html').classList.contains('dark')) return;
        this.setAppearance(theme);
      },
      _resetStylesOnLoad() {
        const $resetStyles = document.createElement('style');
        $resetStyles.innerText = `*{transition: unset !important;}`;
        $resetStyles.setAttribute('data-hs-appearance-onload-styles', '');
        document.head.appendChild($resetStyles);
        return $resetStyles;
      },
      setAppearance(theme, saveInStore = true, dispatchEvent = true) {
        const $resetStylesEl = this._resetStylesOnLoad();

        if (saveInStore) {
          localStorage.setItem('hs_theme', theme);
        }

        if (theme === 'auto') {
          theme = window.matchMedia('(prefers-color-scheme: dark)').matches
            ? 'dark'
            : 'default';
        }

        document.querySelector('html').classList.remove('dark');
        document.querySelector('html').classList.remove('default');
        document.querySelector('html').classList.remove('auto');

        document
          .querySelector('html')
          .classList.add(this.getOriginalAppearance());

        setTimeout(() => {
          $resetStylesEl.remove();
        });

        if (dispatchEvent) {
          window.dispatchEvent(
            new CustomEvent('on-hs-appearance-change', { detail: theme })
          );
        }
      },
      getAppearance() {
        let theme = this.getOriginalAppearance();
        if (theme === 'auto') {
          theme = window.matchMedia('(prefers-color-scheme: dark)').matches
            ? 'dark'
            : 'default';
        }
        return theme;
      },
      getOriginalAppearance() {
        const defaultTheme = 'default';
        return localStorage.getItem('hs_theme') || defaultTheme;
      },
    };
    HSThemeAppearance.init();

    window
      .matchMedia('(prefers-color-scheme: dark)')
      .addEventListener('change', () => {
        if (HSThemeAppearance.getOriginalAppearance() === 'auto') {
          HSThemeAppearance.setAppearance('auto', false);
        }
      });

    window.addEventListener('load', () => {
      const $clickableThemes = document.querySelectorAll(
        '[data-hs-theme-click-value]'
      );
      const $switchableThemes = document.querySelectorAll(
        '[data-hs-theme-switch]'
      );

      $clickableThemes.forEach(($item) => {
        $item.addEventListener('click', () =>
          HSThemeAppearance.setAppearance(
            $item.getAttribute('data-hs-theme-click-value'),
            true,
            $item
          )
        );
      });

      $switchableThemes.forEach(($item) => {
        $item.addEventListener('change', (e) => {
          HSThemeAppearance.setAppearance(
            e.target.checked ? 'dark' : 'default'
          );
        });

        $item.checked = HSThemeAppearance.getAppearance() === 'dark';
      });

      window.addEventListener('on-hs-appearance-change', (e) => {
        $switchableThemes.forEach(($item) => {
          $item.checked = e.detail === 'dark';
        });
      });
    });

    // Handle dropdown
    const dropdownBtn = document.getElementById('userDropdown');
    const dropdownMenu = document.getElementById('dropdownMenu');

    // Close dropdown when clicking outside
    document.addEventListener('click', (event) => {
      const isClickInside =
        dropdownBtn?.contains(event.target) ||
        dropdownMenu?.contains(event.target);

      if (!isClickInside && !dropdownMenu?.classList.contains('hidden')) {
        dropdownMenu?.classList.add('hidden');
      }
    });

    // Toggle dropdown
    dropdownBtn?.addEventListener('click', (event) => {
      event.stopPropagation();
      dropdownMenu?.classList.toggle('hidden');
    });
  </script>

  <div
    id="logoutDialog"
    class="hidden fixed inset-0 bg-black/50 dark:bg-slate-900/80 z-50 backdrop-blur-sm"
    role="dialog"
    aria-modal="true"
  >
    <div
      class="fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-white p-6 shadow-lg duration-200 sm:rounded-lg dark:bg-slate-900 dark:border-slate-800"
    >
      <div class="flex flex-col space-y-2 text-center sm:text-left">
        <h2 class="text-lg font-semibold text-slate-900 dark:text-slate-50">
          Are you sure you want to logout?
        </h2>
        <p class="text-sm text-slate-500 dark:text-slate-400">
          This will end your session and you'll need to login again to access
          the dashboard.
        </p>
      </div>
      <div
        class="flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2"
      >
        <button
          id="cancelLogout"
          class="inline-flex items-center justify-center px-4 py-2 border border-slate-200 rounded-md text-sm font-medium text-slate-900 bg-transparent hover:bg-slate-100 dark:border-slate-700 dark:text-slate-100 dark:hover:bg-slate-800"
        >
          Cancel
        </button>
        <button
          id="confirmLogout"
          class="inline-flex items-center justify-center px-4 py-2 rounded-md text-sm font-medium text-white bg-pink-600 hover:bg-pink-700 dark:bg-pink-700 dark:hover:bg-pink-800"
        >
          <span id="logoutButtonText">Logout</span>
          <svg
            id="logoutSpinner"
            class="hidden animate-spin ml-2 h-4 w-4 text-white"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              class="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              stroke-width="4"></circle>
            <path
              class="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <script>
    // Handle logout functionality
    const logoutButton = document.getElementById('logoutButton');
    const logoutDialog = document.getElementById('logoutDialog');
    const confirmLogout = document.getElementById('confirmLogout');
    const cancelLogout = document.getElementById('cancelLogout');
    const logoutSpinner = document.getElementById('logoutSpinner');
    const logoutButtonText = document.getElementById('logoutButtonText');

    function showDialog() {
      logoutDialog?.classList.remove('hidden');
      // Prevent body scroll
      document.body.style.overflow = 'hidden';
    }

    function hideDialog() {
      logoutDialog?.classList.add('hidden');
      // Restore body scroll
      document.body.style.overflow = '';
    }

    // Show dialog when logout button is clicked
    logoutButton?.addEventListener('click', showDialog);

    // Hide dialog when cancel is clicked
    cancelLogout?.addEventListener('click', hideDialog);

    // Handle logout confirmation
    confirmLogout?.addEventListener('click', async () => {
      try {
        // Show loading state
        if (logoutSpinner && logoutButtonText) {
          logoutSpinner.classList.remove('hidden');
          logoutButtonText.textContent = 'Logging out...';
        }

        // Disable the button
        if (confirmLogout) {
          (confirmLogout as HTMLButtonElement).disabled = true;
        }

        const response = await fetch('/api/auth/logout', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        if (response.ok) {
          // Clear any client-side state
          localStorage.removeItem('hs_theme');
          sessionStorage.clear();

          // Redirect to home page
          window.location.href = '/';
        } else {
          throw new Error('Logout failed');
        }
      } catch (error) {
        console.error('Error during logout:', error);

        // Reset loading state
        if (logoutSpinner && logoutButtonText) {
          logoutSpinner.classList.add('hidden');
          logoutButtonText.textContent = 'Logout';
        }

        // Re-enable the button
        if (confirmLogout) {
          (confirmLogout as HTMLButtonElement).disabled = false;
        }

        // Show error message
        alert('Failed to logout. Please try again.');
      }
    });

    // Close dialog when clicking outside
    logoutDialog?.addEventListener('click', (e) => {
      if (e.target === logoutDialog) {
        hideDialog();
      }
    });

    // Close dialog when pressing Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !logoutDialog?.classList.contains('hidden')) {
        hideDialog();
      }
    });
  </script>
</header>
